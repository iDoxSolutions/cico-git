@model Cico.Controllers.HomeModel
@{
    ViewBag.Title = "Home Page";
}
<style>
   

    </style>
<script type="text/javascript" src="/scripts/tiny_mce/tiny_mce.js"></script>
<script type="text/javascript">
/*    tinyMCE.init({
        mode: "textareas",
        theme: "simple"
    });*/
</script>

<script type="text/javascript" src="/Scripts/jquery.form.js">
</script>
<script type="text/javascript" src="/Scripts/Forms/CicoFormBase.js">
</script>
<script type="text/javascript" src="/Scripts/notes.js"></script>
<script type="text/javascript" src="/Scripts/Forms/DocumentSubmittedModel.js"></script>
<script type="text/javascript" src="/Scripts/Forms/SelfContainedFormModel.js"></script>
<script type="text/javascript" src="/Scripts/Forms/DocumentWritingModel.js"></script>
<script type="text/javascript" src="/Scripts/Forms/PhysicalActivityModel.js"></script>
<div class="columnsContainer">
    <div class="rightColumn">
        <div id="infoTabs">
            <ul>
                <li><a href="#myinfo">My Info</a></li>
                <li><a href="#completion">Completion</a></li>
                <li><a href="#mydependents">My dependents</a></li>
                <li><a href="#housingquestionare">My Housing Questionaire</a></li>
            </ul>
            

            <div id="completion" >
                <div data-bind="stopBindings: true">
                    <div id="selectedForm" data-bind="template:{name:templateName}">
                    
                    </div>
                </div>
                
                <h3>Due Date:</h3>

                <h3>Instructions:</h3>
                <div class="instructions" ></div>
                <div data-bind="with:selectedItem">
                <div id="note-list" >
                    <div>
                        <form data-bind="submit:notes.addNote">
                            <div class="editor-label">
                                Note text:
                            </div>
                            <div class="editor-field">
                                <textarea id="note-editor" rows="5" data-bind="value:notes.Content"></textarea>
                            </div>
                            <div class="editor-field">
                                <button type="submit">Add Note</button>
                            </div>
                        </form>
                    </div>
                    <ul data-bind=" foreach: notes.notes" class="note-list">
                        <li>
                            <div class="note-content" data-bind="html:Content"></div>
                            <div class="note-tools">
                                <div data-bind="text:'Date Created: '+ DateCreated"></div>

                                <div class="toolbox-button" data-bind="click:$parent.notes.deleteNote">Delete</div>
                            </div>
                            <div style="clear: both"></div>
                        </li>
                    </ul>
                    </div>
            </div>
                
            </div>
            <div id="myinfo">

                <div class="tabContent">
                    <div class="title">Panel title</div>
                    @Html.Partial("EmployeeForm", Model)
                </div>

            </div>
            <div id="mydependents">
                <div class="tabContent">
                    <div class="title">Panel title</div>
                </div>
            </div>
            <div id="housingquestionare">
            </div>
        </div>
    </div>
    <div class="leftColumn">
        <div id="checkInTabs">
            <ul>
                <li><a href="#checkIn">Check-In</a></li>
                <li><a href="#checkOut">Check-out</a></li>
            </ul>
            <div id="checkIn">
                <h4>Priority 1</h4>
                <ul data-bind="foreach: checklist " class="checklist">
                    <li>
                        <div data-bind="css: { selected: selected }" class="checkInItem">
                            <div class="ico ui-icon ui-icon-document" data-bind="css: CssClass">&nbsp; &nbsp;</div>
                            <div class="checkbox">
                                <input data-bind="checked: Checked" type="checkbox" disabled="disabled" />
                            </div>
                            <div data-bind="text: Description, click:selectItem" class="description"></div>

                        </div>
                    </li>

                </ul>
                <h4>Priority 2</h4>

            </div>

            <div id="checkOut">
            </div>

        </div>

    </div>
    <div style="clear: both"></div>
</div>

<script type="text/html" id="DocumentWriting">
    DocumentWriting
</script>

<script type="text/html" id="PhysicalActivity">
    PhysicalActivity
    
</script>

<script type="text/html" id="DocumentSubmitted">
    
    Please download document: <a target="_blank" data-bind="attr: { href: FileUrl },text:FileDesc" >Document Template</a>

    <form data-bind="submit:submitDoc">
        <input name="docSubmitted" type="file" />
        <input type="submit" value="Submit" />
    </form>
</script>

<script type="text/html" id="SelfContainedForm">
    <div data-bind="template:{name:Form}">

    </div>

</script>
<script type="text/html" id="none">
    <form method="post">
    </form>

</script>

@Html.Partial("_SystemForms")

<script type="text/javascript">
    ko.bindingHandlers.stopBindings = {
        init: function () {
            return { 'controlsDescendantBindings': true };
        }
    };


    $(function () {
        $("#infoTabs").tabs();
        $("#checkInTabs").tabs();
    });


    function ComplationDetailsModel(item) {
        var self = this;

        self.submitDoc = function (e) {
            $.post('/checklist/UploadFile', { itemTemplateId: item.Id }, function (data) {
                item.Checked(data.Checked);
                item.CssClass(data.CssClass);
            });
            return false;
        };
    }


    function CheckBoxItem(checked, description, id, homeModel, ItemTemplate, CssClass, ditem) {
        var self = this;
        self.item = ditem;
        self.selectItem = function (item) {
            // item.Checked(false);
            if (item) {
                $('#infoTabs').tabs('option', 'selected', 1);
                ko.utils.arrayForEach(homeModel.checklist(), function (ii) {
                    ii.selected(false);
                });
                item.selected(true);
                ko.cleanNode($("#selectedForm")[0]);
                switch (item.ItemTemplate) {
                    case "DocumentSubmitted":
                        ko.applyBindings(new DocumentSubmittedModel(item.item), $("#selectedForm")[0]);
                        break;
                    case "SelfContainedForm":
                        ko.applyBindings(new SelfContainedFormModel(item.item), $("#selectedForm")[0]);
                        break;
                    case "DocumentWriting":
                        ko.applyBindings(new DocumentWritingModel(item.item), $("#selectedForm")[0]);
                        break;
                    case "PhysicalActivity":
                        ko.applyBindings(new PhysicalActivityModel(item.item), $("#selectedForm")[0]);
                        break;
                    default:
                }
                //ko.cleanNode(document.getElementById("note-list"));
                //ko.applyBindings(new NoteListModel(item.item), $("#note-list")[0]);
                


                homeModel.selectedTemplate(item.ItemTemplate);
                homeModel.selectedItem(item);
                /*tinyMCE.init({
                    mode: "textareas",
                    theme: "simple"
                });*/
            }
        };



        self.Id = id;
        self.Checked = ko.observable(checked);
        self.Description = ko.observable(description);
        self.menuItems = ko.observableArray([]);
        self.selected = ko.observable(false);
        self.ItemTemplate = ItemTemplate;
        self.CssClass = ko.observable(CssClass);
        self.notes = new NoteListModel(this.item);
        self.InstructionText = ditem ? ditem.InstructionText : "";
        self.checkIn = function () {

        };
        self.Checked.subscribe(
            function (newValue) {
                $.post("/checklist/updateitem", self, function (data) {

                });
            }
        );
    }

    function HomeViewModel() {
        var self = this;
        self.selectedItem = ko.observable();
        self.selectedTemplate = ko.observable("none");
        self.checklist = ko.observableArray();
        $.post("/checklist", {}, function (data) {
            ko.utils.arrayForEach(data.CheckListItems, function (item) {
                self.checklist.push(new CheckBoxItem(item.Checked, item.Description, item.Id, self, item.ItemTemplate, item.CssClass, item));
            });
        });

        self.complationDetails = ko.observable(new ComplationDetailsModel());
    }

    var homeModel = new HomeViewModel();
    ko.applyBindings(homeModel);

</script>

